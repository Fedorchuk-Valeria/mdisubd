-- task1

-- CREATE TABLE MyTable(
--     id NUMBER GENERATED BY DEFAULT AS IDENTITY,
--     val NUMBER
-- );

-- task2

-- DECLARE
--     count NUMBER;
-- BEGIN
--     FOR count IN 1..10
--     LOOP 
--         INSERT INTO MyTable(val) VALUES (DBMS_RANDOM.RANDOM);
--     END LOOP;
-- END; 

-- task3

-- DROP FUNCTION MyFunction;

-- CREATE FUNCTION MyFunction (num IN NUMBER) RETURN VARCHAR2 IS
--     even NUMBER := 0;
--     notEven NUMBER := 0;
--     count NUMBER;
--     val VARCHAR2(10);
-- BEGIN
--     FOR count IN (SELECT * FROM MyTable WHERE MOD(val, 2) = 0)
--     LOOP
--         even := even + 1;
--     END LOOP;
--     DBMS_OUTPUT.PUT_LINE(even);
--     notEven := num - even;
--     DBMS_OUTPUT.PUT_LINE(notEven);
--     IF even > notEven THEN
--         val := 'TRUE';
--     ELSIF even < notEven THEN
--         val := 'FALSE';
--     ELSE
--         val := 'EQUAL';
--     END IF;
--     RETURN val;
-- END;

-- DECLARE
--     c VARCHAR2(10);
-- BEGIN
--     c := MyFunction(10);
--     DBMS_OUTPUT.PUT_LINE(c);
-- END;


-- task4

-- CREATE PROCEDURE GetInsertById(num IN NUMBER) IS
--     result VARCHAR2(50);
--     value NUMBER;
-- BEGIN 
--     IF num > 0 THEN
--         SELECT val INTO value FROM MyTable WHERE id = num;
--         DBMS_OUTPUT.PUT_LINE('insert into MyTable values(' ||num||', ' ||value|| ')');
--     ELSE 
--         DBMS_OUTPUT.PUT_LINE('id is negative');
--         END IF;
-- EXCEPTION WHEN NO_DATA_FOUND THEN
--     DBMS_OUTPUT.PUT_LINE('no id found');
-- END;

-- BEGIN 
--     GetInsertById(2);
-- END;


-- task5

-- DROP PROCEDURE InsertProc;

-- CREATE PROCEDURE InsertProc (value IN NUMBER) IS
-- BEGIN
--     INSERT INTO MyTable(val) VALUES (value);
-- END;
-- /

-- CREATE PROCEDURE UpdateProc (num IN NUMBER, newValue IN NUMBER) IS
-- BEGIN
--     UPDATE MyTable SET val = newValue WHERE id = num;
-- END;
-- /

-- CREATE PROCEDURE DeleteProc (num IN NUMBER) IS
-- BEGIN
--     DELETE FROM MyTable WHERE id = num;
-- END;
-- /

-- BEGIN
--     UpdateProc(, 0);
-- END;
-- /

-- SELECT * FROM MyTable;

-- task 6

-- DROP FUNCTION GetRemunerationForTheYear;
-- CREATE FUNCTION GetRemunerationForTheYear(salary IN NUMBER, premiumPerc IN PLS_INTEGER) RETURN NUMBER IS
--     result NUMBER := 0;
--     percent NUMBER;
-- BEGIN
--     IF salary > 0 and premiumPerc > 0 and premiumPerc < 100 THEN
--         percent := premiumPerc / 100;
--         result := (1 + percent) * 12 * salary;
--     ELSE 
--         DBMS_OUTPUT.PUT_LINE('data not valid');
--     END IF;
--     RETURN result;
-- END;

-- DECLARE
--     res NUMBER := -1;
-- BEGIN
--     res := GetRemunerationForTheYear(120, 20.2);
--     DBMS_OUTPUT.PUT_LINE(res);
-- END;
