CREATE TABLE One(
    id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    fk NUMBER NULL,
    name VARCHAR2(50),
    value NUMBER,
    birth_date TIMESTAMP,
    CONSTRAINT one_pk PRIMARY KEY (id)
);

ALTER TABLE One ADD CONSTRAINT fk_three FOREIGN KEY (fk)
    REFERENCES Three(id) ON DELETE SET NULL;

CREATE TABLE Two(
    id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    fk NUMBER NULL,
    name VARCHAR2(50),
    value NUMBER,
    birth_date TIMESTAMP,
    CONSTRAINT two_pk PRIMARY KEY (id),
    CONSTRAINT fk_one FOREIGN KEY (fk)
    REFERENCES One(id) ON DELETE SET NULL
);

DROP TABLE Two;

CREATE TABLE Three(
    id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    fk NUMBER NULL,
    name VARCHAR2(50),
    value NUMBER,
    birth_date TIMESTAMP,
    CONSTRAINT three_pk PRIMARY KEY (id),
    CONSTRAINT fk_two FOREIGN KEY (fk)
    REFERENCES Two(id) ON DELETE SET NULL
);

CREATE TABLE Logs(
    id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    type VARCHAR2(10),
    new_id NUMBER NULL,
    old_id NUMBER NULL,
    new_name VARCHAR(10) NULL,
    old_name VARCHAR(10) NULL,
    new_value NUMBER NULL,
    old_value NUMBER NULL,
    new_date TIMESTAMP NULL,
    old_date TIMESTAMP NULL,
    new_fk NUMBER NULL,
    old_fk NUMBER NULL,
    time TIMESTAMP
);

-- DROP TRIGGER Logs;

CREATE TRIGGER LOGS_ONE
AFTER DELETE OR UPDATE OR INSERT
ON ONE
FOR EACH ROW
BEGIN
    IF DELETING THEN
        INSERT INTO Logs(type, old_id, old_name, old_value, old_date, old_fk, time) 
                        VALUES ('DELETE', :OLD.id, :OLD.name, :OLD.value, :OLD.birth_date, :OLD.fk, TO_TIMESTAMP(TO_CHAR(SYSDATE, 'yyyy-mm-dd hh:mi:ss'), 'yyyy-mm-dd hh:mi:ss'));
    ELSIF UPDATING THEN
        INSERT INTO Logs(type, new_id, old_id, new_name, old_name, new_value, old_value, new_date, old_date, new_fk, old_fk, time) 
                        VALUES ('UPDATE', :NEW.id, :OLD.id, :NEW.name, :OLD.name, :NEW.value, :OLD.value, :NEW.birth_date, :OLD.birth_date, :NEW.fk, :OLD.fk, TO_TIMESTAMP(TO_CHAR(SYSDATE, 'yyyy-mm-dd hh:mi:ss'), 'yyyy-mm-dd hh:mi:ss'));
    ELSIF INSERTING THEN
        INSERT INTO Logs(type, new_id, new_name, new_value, new_date, new_fk, time) 
                        VALUES ('INSERT', :NEW.id, :NEW.name, :NEW.value, :NEW.birth_date, :NEW.fk, TO_TIMESTAMP(TO_CHAR(SYSDATE, 'yyyy-mm-dd hh:mi:ss'), 'yyyy-mm-dd hh:mi:ss'));
    END IF;
END;  

CREATE TRIGGER LOGS_TWO
AFTER DELETE OR UPDATE OR INSERT
ON TWO
FOR EACH ROW
BEGIN
    IF DELETING THEN
        INSERT INTO Logs(type, old_id, old_name, old_value, old_date, old_fk, time) 
                        VALUES ('DELETE', :OLD.id, :OLD.name, :OLD.value, :OLD.birth_date, :OLD.fk, TO_TIMESTAMP(TO_CHAR(SYSDATE, 'yyyy-mm-dd hh:mi:ss'), 'yyyy-mm-dd hh:mi:ss'));
    ELSIF UPDATING THEN
        INSERT INTO Logs(type, new_id, old_id, new_name, old_name, new_value, old_value, new_date, old_date, new_fk, old_fk, time) 
                        VALUES ('UPDATE', :NEW.id, :OLD.id, :NEW.name, :OLD.name, :NEW.value, :OLD.value, :NEW.birth_date, :OLD.birth_date, :NEW.fk, :OLD.fk, TO_TIMESTAMP(TO_CHAR(SYSDATE, 'yyyy-mm-dd hh:mi:ss'), 'yyyy-mm-dd hh:mi:ss'));
    ELSIF INSERTING THEN
        INSERT INTO Logs(type, new_id, new_name, new_value, new_date, new_fk, time) 
                        VALUES ('INSERT', :NEW.id, :NEW.name, :NEW.value, :NEW.birth_date, :NEW.fk, TO_TIMESTAMP(TO_CHAR(SYSDATE, 'yyyy-mm-dd hh:mi:ss'), 'yyyy-mm-dd hh:mi:ss'));
    END IF;
END;  

CREATE TRIGGER LOGS_THREE
AFTER DELETE OR UPDATE OR INSERT
ON THREE
FOR EACH ROW
BEGIN
    IF DELETING THEN
        INSERT INTO Logs(type, old_id, old_name, old_value, old_date, old_fk, time) 
                        VALUES ('DELETE', :OLD.id, :OLD.name, :OLD.value, :OLD.birth_date, :OLD.fk, TO_TIMESTAMP(TO_CHAR(SYSDATE, 'yyyy-mm-dd hh:mi:ss'), 'yyyy-mm-dd hh:mi:ss'));
    ELSIF UPDATING THEN
        INSERT INTO Logs(type, new_id, old_id, new_name, old_name, new_value, old_value, new_date, old_date, new_fk, old_fk, time) 
                        VALUES ('UPDATE', :NEW.id, :OLD.id, :NEW.name, :OLD.name, :NEW.value, :OLD.value, :NEW.birth_date, :OLD.birth_date, :NEW.fk, :OLD.fk, TO_TIMESTAMP(TO_CHAR(SYSDATE, 'yyyy-mm-dd hh:mi:ss'), 'yyyy-mm-dd hh:mi:ss'));
    ELSIF INSERTING THEN
        INSERT INTO Logs(type, new_id, new_name, new_value, new_date, new_fk, time) 
                        VALUES ('INSERT', :NEW.id, :NEW.name, :NEW.value, :NEW.birth_date, :NEW.fk, TO_TIMESTAMP(TO_CHAR(SYSDATE, 'yyyy-mm-dd hh:mi:ss'), 'yyyy-mm-dd hh:mi:ss'));
    END IF;
END;  
