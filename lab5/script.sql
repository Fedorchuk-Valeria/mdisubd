CREATE TABLE One(
    id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    fk NUMBER NULL,
    name VARCHAR2(50),
    value NUMBER,
    birth_date TIMESTAMP,
    CONSTRAINT one_pk PRIMARY KEY (id)
);

ALTER TABLE One ADD CONSTRAINT fk_three FOREIGN KEY (fk)
    REFERENCES Three(id) ON DELETE SET NULL;

CREATE TABLE Two(
    id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    fk NUMBER NULL,
    name VARCHAR2(50),
    value NUMBER,
    birth_date TIMESTAMP,
    CONSTRAINT two_pk PRIMARY KEY (id),
    CONSTRAINT fk_one FOREIGN KEY (fk)
    REFERENCES One(id) ON DELETE SET NULL
);

DROP TABLE Two;

CREATE TABLE Three(
    id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    fk NUMBER NULL,
    name VARCHAR2(50),
    value NUMBER,
    birth_date TIMESTAMP,
    CONSTRAINT three_pk PRIMARY KEY (id),
    CONSTRAINT fk_two FOREIGN KEY (fk)
    REFERENCES Two(id) ON DELETE SET NULL
);

DROP TABLE Logs;

CREATE TABLE Logs(
    id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    type VARCHAR2(10),
    table_name VARCHAR2(10),
    new_id NUMBER NULL,
    old_id NUMBER NULL,
    new_name VARCHAR(10) NULL,
    old_name VARCHAR(10) NULL,
    new_value NUMBER NULL,
    old_value NUMBER NULL,
    new_date TIMESTAMP NULL,
    old_date TIMESTAMP NULL,
    new_fk NUMBER NULL,
    old_fk NUMBER NULL,
    time TIMESTAMP
);

DROP TRIGGER LOGS_THREE;

CREATE TRIGGER LOGS_ONE
AFTER DELETE OR UPDATE OR INSERT
ON ONE
FOR EACH ROW
BEGIN
    IF DELETING THEN
        INSERT INTO Logs(type, table_name, old_id, old_name, old_value, old_date, old_fk, time) 
                        VALUES ('DELETE', 'One', :OLD.id, :OLD.name, :OLD.value, :OLD.birth_date, :OLD.fk, TO_TIMESTAMP(TO_CHAR(SYSDATE, 'yyyy-mm-dd hh:mi:ss'), 'yyyy-mm-dd hh:mi:ss'));
    ELSIF UPDATING THEN
        INSERT INTO Logs(type, table_name, new_id, old_id, new_name, old_name, new_value, old_value, new_date, old_date, new_fk, old_fk, time) 
                        VALUES ('UPDATE', 'One', :NEW.id, :OLD.id, :NEW.name, :OLD.name, :NEW.value, :OLD.value, :NEW.birth_date, :OLD.birth_date, :NEW.fk, :OLD.fk, TO_TIMESTAMP(TO_CHAR(SYSDATE, 'yyyy-mm-dd hh:mi:ss'), 'yyyy-mm-dd hh:mi:ss'));
    ELSIF INSERTING THEN
        INSERT INTO Logs(type, table_name, new_id, new_name, new_value, new_date, new_fk, time) 
                        VALUES ('INSERT', 'One', :NEW.id, :NEW.name, :NEW.value, :NEW.birth_date, :NEW.fk, TO_TIMESTAMP(TO_CHAR(SYSDATE, 'yyyy-mm-dd hh:mi:ss'), 'yyyy-mm-dd hh:mi:ss'));
    END IF;
END;  

CREATE TRIGGER LOGS_TWO
AFTER DELETE OR UPDATE OR INSERT
ON TWO
FOR EACH ROW
BEGIN
    IF DELETING THEN
        INSERT INTO Logs(type, table_name, old_id, old_name, old_value, old_date, old_fk, time) 
                        VALUES ('DELETE', 'Two', :OLD.id, :OLD.name, :OLD.value, :OLD.birth_date, :OLD.fk, TO_TIMESTAMP(TO_CHAR(SYSDATE, 'yyyy-mm-dd hh:mi:ss'), 'yyyy-mm-dd hh:mi:ss'));
    ELSIF UPDATING THEN
        INSERT INTO Logs(type, table_name, new_id, old_id, new_name, old_name, new_value, old_value, new_date, old_date, new_fk, old_fk, time) 
                        VALUES ('UPDATE', 'Two', :NEW.id, :OLD.id, :NEW.name, :OLD.name, :NEW.value, :OLD.value, :NEW.birth_date, :OLD.birth_date, :NEW.fk, :OLD.fk, TO_TIMESTAMP(TO_CHAR(SYSDATE, 'yyyy-mm-dd hh:mi:ss'), 'yyyy-mm-dd hh:mi:ss'));
    ELSIF INSERTING THEN
        INSERT INTO Logs(type, table_name, new_id, new_name, new_value, new_date, new_fk, time) 
                        VALUES ('INSERT', 'Two', :NEW.id, :NEW.name, :NEW.value, :NEW.birth_date, :NEW.fk, TO_TIMESTAMP(TO_CHAR(SYSDATE, 'yyyy-mm-dd hh:mi:ss'), 'yyyy-mm-dd hh:mi:ss'));
    END IF;
END;   

CREATE TRIGGER LOGS_THREE
AFTER DELETE OR UPDATE OR INSERT
ON THREE
FOR EACH ROW
BEGIN
    IF DELETING THEN
        INSERT INTO Logs(type, table_name, old_id, old_name, old_value, old_date, old_fk, time) 
                        VALUES ('DELETE', 'Three', :OLD.id, :OLD.name, :OLD.value, :OLD.birth_date, :OLD.fk, TO_TIMESTAMP(TO_CHAR(SYSDATE, 'yyyy-mm-dd hh:mi:ss'), 'yyyy-mm-dd hh:mi:ss'));
    ELSIF UPDATING THEN
        INSERT INTO Logs(type, table_name, new_id, old_id, new_name, old_name, new_value, old_value, new_date, old_date, new_fk, old_fk, time) 
                        VALUES ('UPDATE', 'Three', :NEW.id, :OLD.id, :NEW.name, :OLD.name, :NEW.value, :OLD.value, :NEW.birth_date, :OLD.birth_date, :NEW.fk, :OLD.fk, TO_TIMESTAMP(TO_CHAR(SYSDATE, 'yyyy-mm-dd hh:mi:ss'), 'yyyy-mm-dd hh:mi:ss'));
    ELSIF INSERTING THEN
        INSERT INTO Logs(type, table_name, new_id, new_name, new_value, new_date, new_fk, time) 
                        VALUES ('INSERT', 'Three', :NEW.id, :NEW.name, :NEW.value, :NEW.birth_date, :NEW.fk, TO_TIMESTAMP(TO_CHAR(SYSDATE, 'yyyy-mm-dd hh:mi:ss'), 'yyyy-mm-dd hh:mi:ss'));
    END IF;
END;  


INSERT INTO One(name, value, birth_date) VALUES ('first', 10, TO_TIMESTAMP('20-FEB-23 01.53.05.000000000 AM'));

INSERT INTO Two(fk, name, value, birth_date) VALUES (2, 'second', 10, TO_TIMESTAMP('20-FEB-12 12.05.05.000000000 AM'));

INSERT INTO Two(fk, name, value, birth_date) VALUES (2, 'secondtwo', 25, TO_TIMESTAMP('09-FEB-12 12.05.05.000000000 AM'));

INSERT INTO Three(fk, name, value, birth_date) VALUES (6, 'third', 13, TO_TIMESTAMP('18-FEB-12 05.05.05.000000000 AM'));

CREATE PROCEDURE RestoreDataByTime(t IN TIMESTAMP)
IS
CURSOR log IS SELECT * FROM Logs WHERE time >= t ORDER BY time DESC;
BEGIN
    FOR l IN log
    LOOP
    IF l.table_name = 'One' THEN
        IF l.type = 'DELETE' THEN
            INSERT INTO One VALUES (l.old_id, l.old_fk, l.old_name, l.old_value, l.old_date);
        ELSIF l.type = 'UPDATE' THEN
            UPDATE One SET fk = l.old_fk, name = l.old_name, value = l.old_value, birth_date = l.old_date WHERE id = l.new_id; 
        ELSIF l.type = 'INSERT' THEN
            DELETE FROM One WHERE id = l.new_id;
        END IF;
    ELSIF l.table_name = 'Two' THEN
        IF l.type = 'DELETE' THEN
            INSERT INTO Two VALUES (l.old_id, l.old_fk, l.old_name, l.old_value, l.old_date);
        ELSIF l.type = 'UPDATE' THEN
            UPDATE Two SET fk = l.old_fk, name = l.old_name, value = l.old_value, birth_date = l.old_date WHERE id = l.new_id; 
        ELSIF l.type = 'INSERT' THEN
            DELETE FROM Two WHERE id = l.new_id;
        END IF;
    ELSIF l.table_name = 'Three' THEN
        IF l.type = 'DELETE' THEN
            INSERT INTO Three VALUES (l.old_id, l.old_fk, l.old_name, l.old_value, l.old_date);
        ELSIF l.type = 'UPDATE' THEN
            UPDATE Three SET fk = l.old_fk, name = l.old_name, value = l.old_value, birth_date = l.old_date WHERE id = l.new_id; 
        ELSIF l.type = 'INSERT' THEN
            DELETE FROM Three WHERE id = l.new_id;
        END IF;
    END IF;
    END LOOP;
    DELETE FROM Logs WHERE time >= t;
END RestoreDataByTime;

DROP PROCEDURE RestoreDataByInterval;

CREATE PROCEDURE RestoreDataByInterval(now IN TIMESTAMP, sec NUMBER)
IS
CURSOR log IS 
SELECT * FROM Logs WHERE ( CAST (now as DATE) - CAST (time as DATE)) * 3600 * 24 <= sec ORDER BY time DESC;
BEGIN
    FOR l IN log
    LOOP
    IF l.table_name = 'One' THEN
        IF l.type = 'DELETE' THEN
            INSERT INTO One VALUES (l.old_id, l.old_fk, l.old_name, l.old_value, l.old_date);
        ELSIF l.type = 'UPDATE' THEN
            UPDATE One SET fk = l.old_fk, name = l.old_name, value = l.old_value, birth_date = l.old_date WHERE id = l.new_id; 
        ELSIF l.type = 'INSERT' THEN
            DELETE FROM One WHERE id = l.new_id;
        END IF;
    ELSIF l.table_name = 'Two' THEN
        IF l.type = 'DELETE' THEN
            INSERT INTO Two VALUES (l.old_id, l.old_fk, l.old_name, l.old_value, l.old_date);
        ELSIF l.type = 'UPDATE' THEN
            UPDATE Two SET fk = l.old_fk, name = l.old_name, value = l.old_value, birth_date = l.old_date WHERE id = l.new_id; 
        ELSIF l.type = 'INSERT' THEN
            DELETE FROM Two WHERE id = l.new_id;
        END IF;
    ELSIF l.table_name = 'Three' THEN
        IF l.type = 'DELETE' THEN
            INSERT INTO Three VALUES (l.old_id, l.old_fk, l.old_name, l.old_value, l.old_date);
        ELSIF l.type = 'UPDATE' THEN
            UPDATE Three SET fk = l.old_fk, name = l.old_name, value = l.old_value, birth_date = l.old_date WHERE id = l.new_id; 
        ELSIF l.type = 'INSERT' THEN
            DELETE FROM Three WHERE id = l.new_id;
        END IF;
    END IF;
    END LOOP;
    DELETE FROM Logs WHERE ( CAST (now as DATE) - CAST (time as DATE)) * 3600 * 24 <= sec;
END RestoreDataByInterval;

SELECT * FROM Logs;
INSERT INTO One(name, value, birth_date) VALUES ('temp', 100, TO_TIMESTAMP('02-APR-23 01.53.05.000000000 AM'));

BEGIN
    RestoreDataByInterval(TO_TIMESTAMP(TO_CHAR(SYSDATE, 'yyyy-mm-dd hh:mi:ss'), 'yyyy-mm-dd hh:mi:ss'), 600);
END;