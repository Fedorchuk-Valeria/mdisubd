-- CREATE TABLE MyTable(
--     id NUMBER GENERATED BY DEFAULT AS IDENTITY,
--     name VARCHAR2(20),
--     value NUMBER
-- );

-- task1

-- CREATE TABLE Attributes(
--     name VARCHAR2(20)
-- );
-- INSERT INTO Attributes VALUES('join');

-- CREATE TABLE ConditionAttributes(
--     name VARCHAR2(20)
-- );
-- INSERT INTO ConditionAttributes VALUES('second_op');

DROP FUNCTION SelectParse;

CREATE FUNCTION SelectParse(json_string IN VARCHAR2) RETURN VARCHAR2 
IS
result VARCHAR2(200) := '';
i NUMBER;
j NUMBER;
c NUMBER := 1;
b NUMBER := 1;
CURSOR attr IS SELECT * FROM Attributes;
BEGIN
    FOR a IN attr
    LOOP
        i := INSTR(json_string, a.name);
        i := i + LENGTH(a.name) + 2;
        j := INSTR(json_string, ',', 1, c);
        IF j = 0 THEN
            j := INSTR(json_string, '}', 1, b);
        END IF;
        IF a.name = 'where' AND INSTR(SUBSTR(json_string, i, j - i), 'no') < i + 8 THEN
            result := result || ConditionParse(SUBSTR(json_string, i));
            c := c + 3;
            CONTINUE;
        END IF;
        IF INSTR(SUBSTR(json_string, i, j - i), 'no') = 0 THEN
            result := result || SUBSTR(json_string, i, j - i);
        END IF;
        c := c + 1;
    END LOOP;
    RETURN result;   
END;

CREATE FUNCTION InnerSelectParse(json_string IN VARCHAR2) RETURN VARCHAR2 
IS
result VARCHAR2(100) := '';
i NUMBER;
j NUMBER;
c NUMBER := 1;
b NUMBER := 1;
CURSOR attr IS SELECT * FROM Attributes;
BEGIN
    FOR a IN attr
    LOOP
        i := INSTR(json_string, a.name);
        i := i + LENGTH(a.name) + 2;
        j := INSTR(json_string, ',', 1, c);
        IF j = 0 THEN
            j := INSTR(json_string, '}', 1, b);
        END IF;
        IF INSTR(SUBSTR(json_string, i, j - i), 'no') = 0 THEN
            result := result || SUBSTR(json_string, i, j - i);
        END IF;
        c := c + 1;
    END LOOP;
    RETURN result;   
END;

DROP FUNCTION ConditionParse;

CREATE FUNCTION ConditionParse(json_string IN VARCHAR2) RETURN VARCHAR2 
IS
result VARCHAR2(200) := '';
i NUMBER;
j NUMBER;
c NUMBER := 1;
b NUMBER := 1;
inn NUMBER;
jn NUMBER;
cn NUMBER := 1;
bn NUMBER := 1;
CURSOR attr IS SELECT * FROM Attributes;
CURSOR con_attr IS SELECT * FROM ConditionAttributes;
BEGIN
    result := result || ' where ';
    FOR c_a IN con_attr
    LOOP
        i := INSTR(json_string, c_a.name);
        i := i + LENGTH(c_a.name) + 2;
        j := INSTR(json_string, ',', 1, c);
        IF j = 0 THEN
            j := INSTR(json_string, '}', 1, b);
        END IF;
        IF INSTR(SUBSTR(json_string, i, j - i), 'SELECT') <> 0 THEN
            result := result || ' (' || InnerSelectParse(SUBSTR(json_string, i)) || ')';
            c := c + 5;
            CONTINUE;
        END IF;
        IF INSTR(SUBSTR(json_string, i, j - i), 'no') = 0 THEN
            result := result || SUBSTR(json_string, i, j - i);
        END IF;
        result := REPLACE(result, '}', '');
        c := c + 1;
    END LOOP;
    RETURN result;
END;

DROP FUNCTION Parse;

CREATE FUNCTION Parse(json_string IN VARCHAR2) RETURN VARCHAR2 
IS
result VARCHAR2(400) := '';
BEGIN
   result := SelectParse(json_string);
   RETURN result;
END;

BEGIN
    DBMS_OUTPUT.PUT_LINE(Parse('{ "type": SELECT, "cols": name, "tables": FROM MyTable1, "where": 
    { "first_op": 
    { "where: "first_op": id, "operator": IN, "second_op": 
    { "type": SELECT, "cols": name, "tables": FROM MyTable2, "where": no, "join": no}}, 
    "operator": EXISTS, "second_op": 
    {"type": SELECT, "cols": name, "tables": FROM MyTable2, "where": no, "join": no} }, 
    "join": no }'));
END;

DECLARE
   TYPE EmpCurTyp IS REF CURSOR;
   emp_cv   EmpCurTyp;
   CURSOR c1 IS
      SELECT name FROM MyTable;
   emp_rec  c1%ROWTYPE;
   sql_stmt VARCHAR2(200);
BEGIN
   sql_stmt := Parse('{ "type": SELECT, "cols": name, "tables": FROM MyTable, "where": 
    { "first_op": id, "operator": =, "second_op": 1 }, "join": no }');
   OPEN emp_cv FOR sql_stmt;
   LOOP
      FETCH emp_cv INTO emp_rec;
      EXIT WHEN emp_cv%NOTFOUND;
      DBMS_OUTPUT.PUT_LINE(emp_rec.name);
   END LOOP;
   CLOSE emp_cv;
END;

DECLARE
   TYPE CurTyp IS REF CURSOR;
   table_cv CurTyp;
   table_rec MyTable%ROWTYPE;
   sql_stmt VARCHAR2(200);
BEGIN
   sql_stmt := Parse('{"type": SELECT, "cols": *, "tables": FROM MyTable, "where": no, "join": no }');
   OPEN table_cv FOR sql_stmt;
   LOOP
      FETCH table_cv INTO table_rec;
      EXIT WHEN table_cv%NOTFOUND;
      DBMS_OUTPUT.PUT_LINE('id '||table_rec.id|| ' name ' ||table_rec.name|| ' value ' ||table_rec.value|| ';');
   END LOOP;
   CLOSE table_cv;
END;
